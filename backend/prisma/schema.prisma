generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  PATIENT
  PROVIDER
}

enum Status {
  SCHEDULED
  COMPLETED
  CANCELED
}

model User {
  id           String    @id @default(uuid())
  name         String
  profileImage String?
  email        String    @unique
  role         Role      @default(PATIENT)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?

  diagnosesAsPatient  Diagnosis[] @relation("DiagnosesForPatient")
  diagnosesByProvider Diagnosis[] @relation("DiagnosesByProvider")

  patientsMedications Medication[] @relation("PatientsMedications")
  prescribedBy        Medication[] @relation("PrescribedBy")

  patientGoals     Goal[] @relation("PatientGoals")
  goalsByProviders Goal[] @relation("GoalsByProvider")

  appointmentsAsPatient  Appointment[] @relation("PatientAppointments")
  appointmentsAsProvider Appointment[] @relation("ProviderAppointments")

  patientsBloodPressures   BloodPressure[] @relation("PatientsBloodPressures")
  BloodPressuresRecordedBy BloodPressure[] @relation("BloodPressuresRecordedBy")

  patientsHeartRates   HeartRate[] @relation("PatientsHeartRates")
  heartRatesRecordedBy HeartRate[] @relation("HeartRateRecordedBy")

  patientsWeights   Weight[] @relation("PatientsWeights")
  weightsRecordedBy Weight[] @relation("WeightRecordedBy")

  patientsGlucoses   Glucose[] @relation("PatientsGlucoses")
  glucosesRecordedBy Glucose[] @relation("GlucosesRecordedBy")

  patientsTemperatures   Temperature[] @relation("PatientsTemperatures")
  temperaturesRecordedBy Temperature[] @relation("TemperaturesRecordedBy")
}

model ExternalProvider {
  id             String          @id @default(uuid())
  name           String
  facility       String?
  officeNumber   String?
  diagnoses      Diagnosis[]
  medications    Medication[]
  goals          Goal[]
  appointments   Appointment[]
  bloodPressures BloodPressure[]
  heartRates     HeartRate[]
  weights        Weight[]
  glucoses       Glucose[]
  temperatures   Temperature[]
}

model Diagnosis {
  id                 String            @id @default(uuid())
  patient            User              @relation("DiagnosesForPatient", fields: [patientId], references: [id], map: "Diagnosis_patient_fkey")
  patientId          String
  provider           User?             @relation("DiagnosesByProvider", fields: [providerId], references: [id], map: "Diagnosis_provider_fkey")
  providerId         String?
  externalProvider   ExternalProvider? @relation(fields: [externalProviderId], references: [id], map: "Diagnosis_externalProvider_fkey")
  externalProviderId String?
  diagnosisName      String
  diagnosisCode      Int
  dateDiagnosed      DateTime          @default(now())
  isActive           Boolean           @default(true)
  notes              String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt

  @@unique([patientId, providerId, diagnosisCode], map: "unique_patient_provider_diagnosis")
  @@unique([patientId, externalProviderId, diagnosisCode], map: "unique_patient_externalProvider_diagnosis")
}

model Medication {
  id                 String            @id @default(uuid())
  patient            User              @relation("PatientsMedications", fields: [patientId], references: [id], map: "Medication_patient_fkey")
  patientId          String
  provider           User?             @relation("PrescribedBy", fields: [providerId], references: [id], map: "Medication_provider_fkey")
  providerId         String?
  externalProvider   ExternalProvider? @relation(fields: [externalProviderId], references: [id], map: "Medication_externalProvider_fkey")
  externalProviderId String?
  medicationName     String
  dosage             String
  frequency          String
  dateStarted        DateTime          @default(now())
  dateStopped        DateTime?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt

  @@unique([patientId, providerId, medicationName], map: "unique_patient_provider_medication")
  @@unique([patientId, externalProviderId, medicationName], map: "unique_patient_externalProvider_medication")
}

model Goal {
  id                 String            @id @default(uuid())
  patient            User              @relation("PatientGoals", fields: [patientId], references: [id], map: "Goal_patient_fkey")
  patientId          String
  provider           User?             @relation("GoalsByProvider", fields: [providerId], references: [id], map: "Goal_provider_fkey")
  providerId         String?
  externalProvider   ExternalProvider? @relation(fields: [externalProviderId], references: [id], map: "Goal_externalProvider_fkey")
  externalProviderId String?
  title              String
  description        String
  targetDate         DateTime
  isCompleted        Boolean           @default(false)
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt

  @@unique([patientId, title], map: "unique_patient_goal")
}

model Appointment {
  id                 String            @id @default(uuid())
  patient            User              @relation("PatientAppointments", fields: [patientId], references: [id], map: "Appointment_patient_fkey")
  patientId          String
  provider           User?             @relation("ProviderAppointments", fields: [providerId], references: [id], map: "Appointment_provider_fkey")
  providerId         String?
  externalProvider   ExternalProvider? @relation(fields: [externalProviderId], references: [id], map: "Appointment_externalProvider_fkey")
  externalProviderId String?
  appointmentTime    DateTime
  notes              String?
  status             Status            @default(SCHEDULED)
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt

  @@unique([providerId, appointmentTime], map: "unique_provider_appointment_time")
  @@unique([externalProviderId, appointmentTime], map: "unique_externalProvider_appointment_time")
}

model BloodPressure {
  id                      String            @id @default(uuid())
  patient                 User              @relation("PatientsBloodPressures", fields: [patientId], references: [id], map: "BloodPressure_patient_fkey")
  patientId               String
  bloodPressureRecordedBy User?             @relation("BloodPressuresRecordedBy", fields: [providerId], references: [id], map: "BloodPressure_provider_fkey")
  providerId              String?
  externalProvider        ExternalProvider? @relation(fields: [externalProviderId], references: [id], map: "BloodPressure_externalProvider_fkey")
  externalProviderId      String?
  systolic                Int
  diastolic               Int
  recordedAt              DateTime          @default(now())

  @@unique([patientId, providerId, recordedAt], map: "unique_bp_patient_provider_recordedAt")
  @@unique([patientId, externalProviderId, recordedAt], map: "unique_bp_patient_external_recordedAt")
}

model HeartRate {
  id                  String            @id @default(uuid())
  patient             User              @relation("PatientsHeartRates", fields: [patientId], references: [id], map: "HeartRate_patient_fkey")
  patientId           String
  heartRateRecordedBy User?             @relation("HeartRateRecordedBy", fields: [providerId], references: [id], map: "HeartRate_provider_fkey")
  providerId          String?
  externalProvider    ExternalProvider? @relation(fields: [externalProviderId], references: [id], map: "HeartRate_externalProvider_fkey")
  externalProviderId  String?
  value               Int
  recordedAt          DateTime          @default(now())

  @@unique([patientId, providerId, recordedAt], map: "unique_hr_patient_provider_recordedAt")
  @@unique([patientId, externalProviderId, recordedAt], map: "unique_hr_patient_external_recordedAt")
}

model Weight {
  id                 String            @id @default(uuid())
  patient            User              @relation("PatientsWeights", fields: [patientId], references: [id], map: "Weight_patient_fkey")
  patientId          String
  weightRecordedBy   User?             @relation("WeightRecordedBy", fields: [providerId], references: [id], map: "Weight_provider_fkey")
  providerId         String?
  externalProvider   ExternalProvider? @relation(fields: [externalProviderId], references: [id], map: "Weight_externalProvider_fkey")
  externalProviderId String?
  value              Int
  recordedAt         DateTime          @default(now())

  @@unique([patientId, providerId, recordedAt], map: "unique_weight_patient_provider_recordedAt")
  @@unique([patientId, externalProviderId, recordedAt], map: "unique_weight_patient_external_recordedAt")
}

model Glucose {
  id                 String            @id @default(uuid())
  patient            User              @relation("PatientsGlucoses", fields: [patientId], references: [id], map: "Glucose_patient_fkey")
  patientId          String
  glucoseRecordedBy  User?             @relation("GlucosesRecordedBy", fields: [providerId], references: [id], map: "Glucose_provider_fkey")
  providerId         String?
  externalProvider   ExternalProvider? @relation(fields: [externalProviderId], references: [id], map: "Glucose_externalProvider_fkey")
  externalProviderId String?
  value              Int
  recordedAt         DateTime          @default(now())

  @@unique([patientId, providerId, recordedAt], map: "unique_glucose_patient_provider_recordedAt")
  @@unique([patientId, externalProviderId, recordedAt], map: "unique_glucose_patient_external_recordedAt")
}

model Temperature {
  id                    String            @id @default(uuid())
  patient               User              @relation("PatientsTemperatures", fields: [patientId], references: [id], map: "Temperature_patient_fkey")
  patientId             String
  temperatureRecordedBy User?             @relation("TemperaturesRecordedBy", fields: [providerId], references: [id], map: "Temperature_provider_fkey")
  providerId            String?
  externalProvider      ExternalProvider? @relation(fields: [externalProviderId], references: [id], map: "Temperature_externalProvider_fkey")
  externalProviderId    String?
  value                 Int
  recordedAt            DateTime          @default(now())

  @@unique([patientId, providerId, recordedAt], map: "unique_temp_patient_provider_recordedAt")
  @@unique([patientId, externalProviderId, recordedAt], map: "unique_temp_patient_external_recordedAt")
}
